package edu.ufl.cise.cnt5106c;

import edu.ufl.cise.cnt5106c.log.LogHelper;
import edu.ufl.cise.cnt5106c.io.CustomInputStream;
import edu.ufl.cise.cnt5106c.io.ProtocolazibleObjectOutputStream;
import edu.ufl.cise.cnt5106c.log.FileTransferUpdateLogger;
import edu.ufl.cise.cnt5106c.messages.Handshake;
import edu.ufl.cise.cnt5106c.messages.PeerMessage;
import edu.ufl.cise.cnt5106c.messages.RequestMessage;

import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;


public class CommunicationChannelHandler implements Runnable {

    private static final int PEER_ID_UNSET = -1;

    private final int peerId;
    private final Socket _socket;
    private final ProtocolazibleObjectOutputStream _out;
    private final FileManager fileManager;
    private final PeerManager peerManager;
    private final boolean isConnectingPeer;
    private final int _expectedRemotePeerId;
    private final AtomicInteger _remotePeerId;
    private final BlockingQueue<PeerMessage> _queue = new LinkedBlockingQueue<>();

    public CommunicationChannelHandler(int localPeerId, Socket socket, FileManager fileMgr, PeerManager peerMgr)
            throws IOException {
        this(localPeerId, false, -1, socket, fileMgr, peerMgr);
    }

    public CommunicationChannelHandler(int localPeerId, boolean isConnectingPeer, int expectedRemotePeerId,
                             Socket socket, FileManager fileMgr, PeerManager peerMgr) throws IOException {
    	this._socket = socket;
    	this.peerId = localPeerId;
        this.isConnectingPeer = isConnectingPeer;
        this._expectedRemotePeerId = expectedRemotePeerId;
        this.fileManager = fileMgr;
        this.peerManager = peerMgr;
        this._out = new ProtocolazibleObjectOutputStream(_socket.getOutputStream());
        this._remotePeerId = new AtomicInteger(PEER_ID_UNSET);
    }

    public int getRemotePeerId() {
        return _remotePeerId.get();
    }

    @Override
    public void run() {
        new Thread() {

            private boolean _remotePeerIsChoked = true;

            @Override
            public void run() {
                Thread.currentThread().setName(getClass().getName() + "-" + _remotePeerId + "-sending thread");
                while (true) {
                    try {
                        final PeerMessage message = _queue.take();
                        if (message == null) {
                            continue;
                        }
                        if (_remotePeerId.get() != PEER_ID_UNSET) {
                            switch (message.getType()) {
                                case Choke: {
                                    if (!_remotePeerIsChoked) {
                                        _remotePeerIsChoked = true;
                                        sendInternal(message);
                                    }
                                    break;
                                }

                                case Unchoke: {
                                    if (_remotePeerIsChoked) {
                                        _remotePeerIsChoked = false;
                                        sendInternal(message);
                                    }
                                    break;
                                }

                                default:
                                    sendInternal(message);
                            }
                        } else {
                            LogHelper.getLogger().debug("cannot send message of type "
                                    + message.getType() + " because the remote peer has not handshaked yet.");
                        }
                    } catch (IOException ex) {
                        LogHelper.getLogger().warning(ex);
                    } catch (InterruptedException ex) {
                    }
                }
            }
        }.start();

        try {
            final CustomInputStream in = new CustomInputStream(_socket.getInputStream());

            // Send handshake
            _out.writeObject(new Handshake(peerId));

            // Receive and check handshake
            Handshake rcvdHandshake = (Handshake) in.readObject();
            _remotePeerId.set(rcvdHandshake.getPeerId());
            Thread.currentThread().setName(getClass().getName() + "-" + _remotePeerId.get());
            final FileTransferUpdateLogger eventLogger = new FileTransferUpdateLogger(peerId);
            final MessageHandler msgHandler = new MessageHandler(_remotePeerId.get(), fileManager, peerManager, eventLogger);
            if (isConnectingPeer && (_remotePeerId.get() != _expectedRemotePeerId)) {
                throw new Exception("Remote peer id " + _remotePeerId + " does not match with the expected id: " + _expectedRemotePeerId);
            }

            // Handshake successful
            eventLogger.peerConnection(_remotePeerId.get(), isConnectingPeer);

            sendInternal(msgHandler.handleHandShakeMsgFromPeer(rcvdHandshake));
            while (true) {
                try {
                    sendInternal(msgHandler.handleActualMsgFromPeer((PeerMessage) in.readObject()));
                } catch (Exception ex) {
                    LogHelper.getLogger().warning(ex);
                    break;
                }
            }
        } catch (Exception ex) {
            LogHelper.getLogger().warning(ex);
        } finally {
            try {
                _socket.close();
            } catch (Exception e) {
            }
        }
        LogHelper.getLogger().warning(Thread.currentThread().getName()
                + " terminating, messages will no longer be accepted.");
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof CommunicationChannelHandler) {
            return ((CommunicationChannelHandler) obj)._remotePeerId == _remotePeerId;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 41 * hash + peerId;
        return hash;
    }

    public void send(final PeerMessage message) {
        _queue.add(message);
    }

    private synchronized void sendInternal(PeerMessage message) throws IOException {
        if (message != null) {
            _out.writeObject(message);
            switch (message.getType()) {
                case Request: {
                    new java.util.Timer().schedule(
                            new RequestTimer((RequestMessage) message, fileManager, _out, message, _remotePeerId.get()),
                            peerManager.getUnchokingInterval() * 2
                    );
                }
            }
        }
    }
}
