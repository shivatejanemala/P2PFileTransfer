package edu.ufl.cise.cnt5106c;

import edu.ufl.cise.cnt5106c.conf.CommonProperties;
import edu.ufl.cise.cnt5106c.file.Destination;
import edu.ufl.cise.cnt5106c.log.LogHelper;

import java.util.BitSet;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Properties;


public class FileManager {

    private BitSet isPieceAvailable; // Used to handle the availability of each piece
    private final Collection<FileManagerListener> fileManagerListeners = new LinkedList<>();
    private Destination fileLocation; // Location of the file to be read (or) created
    private final double pieceSize; // Size of the piece as mentioned in properties
    private final int noOfPieces; // Number  of the pieces determined  as per parameter in properties
    private final RequestedParts piecesBeingRequested; // Handles the details about pieces being Requested

    FileManager (int peerId, Properties properties) {

    	this.fileLocation = new Destination(peerId, properties.getProperty (CommonProperties.FileName.toString()));
    	this.pieceSize = Integer.parseInt(properties.getProperty(CommonProperties.PieceSize.toString()));
    	this.noOfPieces = (int) Math.ceil (Integer.parseInt(properties.getProperty(CommonProperties.FileSize.toString()))/pieceSize);
    	this.isPieceAvailable = new BitSet(noOfPieces);
    	this.piecesBeingRequested = new RequestedParts(noOfPieces, Integer.parseInt(properties.getProperty(CommonProperties.UnchokingInterval.toString())) * 1000);
    	
    }

 

    /**
     *Function used to handle the writing of the file piece once received
     * @param pieceId
     * @param piece
     */
    public synchronized void addPart (int pieceId, byte[] piece) {
        
        // TODO: write part on file, at the specified directroy
        final boolean isNewPiece = !isPieceAvailable.get(pieceId);
        isPieceAvailable.set (pieceId);

        if (isNewPiece) {
            fileLocation.writeByteArrayAsFilePart(piece, pieceId);
            for (FileManagerListener listener : fileManagerListeners) {
                listener.isPieceArrived (pieceId);
            }
        }
        if (isFileCompleted()) {
            fileLocation.mergeFile(isPieceAvailable.cardinality());
            for (FileManagerListener listener : fileManagerListeners) {
                listener.isFileDownloadComplete();
            }
        }
    }

    /**
     * @param availableParts parts that are available at the remote peer
     * @return the ID of the part to request, if any, or a negative number in
     * case all the missing parts are already being requested or the file is
     * complete.
     */
    synchronized int getPartToRequest(BitSet availableParts) {
        availableParts.andNot(getReceivedParts());
        return piecesBeingRequested.getPartToRequest (availableParts);
    }

    public synchronized BitSet getReceivedParts () {
        return (BitSet) isPieceAvailable.clone();
    }

    synchronized public boolean hasPart(int pieceIndex) {
        return isPieceAvailable.get(pieceIndex);
    }

    /**
     * Set all parts as received.
     */
    public synchronized void setAllParts()
    {
        for (int i = 0; i < noOfPieces; i++) {
            isPieceAvailable.set(i, true);
        }
        LogHelper.getLogger().debug("Received parts set to: " + isPieceAvailable.toString());
    }

    public synchronized int getNumberOfReceivedParts() {
        return isPieceAvailable.cardinality();
    }

    byte[] getPiece (int partId) {
        byte[] piece = fileLocation.getPartAsByteArray(partId);
        return piece;
    }

    public void registerListener (FileManagerListener listener) {
        fileManagerListeners.add (listener);
    }

    public void splitFile(){
        fileLocation.splitFile((int) pieceSize);
    }

    public byte[][] getAllPieces(){
        return fileLocation.getAllPartsAsByteArrays();
    }

    public int getBitmapSize() {
        return noOfPieces;
    }

    private boolean isFileCompleted() {
        for (int i = 0; i < noOfPieces; i++) {
            if (!isPieceAvailable.get(i)) {
                return false;
            }
        }
        return true;
    }
}
