package edu.ufl.cise.cnt5106c;

import edu.ufl.cise.cnt5106c.conf.PeerInfoDAO;
import edu.ufl.cise.cnt5106c.log.FileTransferUpdateLogger;
import edu.ufl.cise.cnt5106c.log.LogHelper;
import edu.ufl.cise.cnt5106c.messages.Choke;
import edu.ufl.cise.cnt5106c.messages.Have;
import edu.ufl.cise.cnt5106c.messages.NotInterested;
import edu.ufl.cise.cnt5106c.messages.Unchoke;

import java.io.IOException;
import java.net.ConnectException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;


public class FileTransferProcess implements Runnable, FileManagerListener, PeerManagerListener {
    private final int peerId; // Used to handle the peerId of the peer
    private final int portNo; // Maintains the port Number of the peer to which others need to be connected
    private final boolean hasFile; // Flag used to set true when peer has the complete file
    private final Properties commonProps; // Properties of the file transfer protocol read from Common.cfg
    private final FileManager fileManager; 
    private final PeerManager peerManager;
    private final FileTransferUpdateLogger ftupdateLogger; // ftupdateLogger used to log the updates in the file transfer protocol for individual peer
    private final AtomicBoolean isfileComplete = new AtomicBoolean(false);  // Flag used to set true when peer has the complete file
    private final AtomicBoolean isNeighboursFileComplete = new AtomicBoolean(false); // Flag used to set true when all the peers has the complete file 
    private final AtomicBoolean isTerminateFlag = new AtomicBoolean(false); // Flag used to set true when peer has recieved the complete file
    private final Collection<ConnectionHandler> connectionHandlers = Collections.newSetFromMap(new ConcurrentHashMap<ConnectionHandler, Boolean>()); //List used to handle the  connections to other peers

    public FileTransferProcess(int peerId, String address, int port, boolean hasFile, Collection<PeerInfoDAO> peerInfo, Properties conf) {
        this.peerId = peerId;
        this.portNo = port;
        this.hasFile = hasFile;
        this.commonProps = conf;    
        this.fileManager = new FileManager(this.peerId, this.commonProps);
        ArrayList<PeerInfoDAO> remotePeers = new ArrayList<>(peerInfo);
        for (PeerInfoDAO ri : remotePeers) {
            if (Integer.parseInt(ri._peerId) == peerId) {
                // rmeove myself
                remotePeers.remove(ri);
                break;
            }
        }
        this.peerManager = new PeerManager(this.peerId, remotePeers, this.fileManager.getBitmapSize(), commonProps);
        this.ftupdateLogger = new FileTransferUpdateLogger(peerId);
        this.isfileComplete.set(this.hasFile);
    }

    /*
    * Function used to initialize the file managers and the peer managers to handle the file transfer and communication between peers
    *
    */
    void initializeManagers() {
    	this.fileManager.registerListener(this);
    	this.peerManager.registerListener(this);

    	// If the peer already has a file, it splits the file to pieces for transferring to other peers
        if (this.hasFile) {
            LogHelper.getLogger().debug("Creating the pieces for the transfer");
            fileManager.splitFile();
            fileManager.setAllParts();
        }
        
        // Initialize the  PeerManager Thread
        Thread t = new Thread(peerManager);
        t.setName("peerManager- "+ peerId);
        t.start();
    }

    /*
     * Function used to initialize the file transfer process between peers
     *
     */
    @Override
    public void run() {
        try {
            ServerSocket serverSocket = new ServerSocket(portNo);
            while (!isTerminateFlag.get()) {
                try {
                    LogHelper.getLogger().info(": Peer:" + peerId + " started listening on port " + portNo + ".");
                    // This is used to accept the connection requests from the peers to this peer
                    addConnHandler(new ConnectionHandler(peerId, serverSocket.accept(), fileManager, peerManager));

                } catch (Exception e) {
                    LogHelper.getLogger().warning(e);
                }
            }
        } catch (IOException ex) {
            LogHelper.getLogger().warning(ex);
        } finally {
            LogHelper.getLogger().warning("terminating, TCP connections will no longer be accepted.");
        }
    }

    /*
     * Function used to start the connection from the peer to other peers in the map
     *
     */
    void initializeConnectionToPeers(Collection<PeerInfoDAO> peersToBeConnected) {
        Iterator<PeerInfoDAO> iter = peersToBeConnected.iterator();
        while (iter.hasNext()) {
            do {
                Socket socket = null;
                PeerInfoDAO peer = iter.next();
                try {
                    LogHelper.getLogger().debug(" Initializing the Connection from peer:"+ peerId+ " to peer: " + peer.getPeerId()+ " (" + peer._peerAddress + ":" + peer.getPort() + ")");
                    socket = new Socket(peer._peerAddress, peer.getPort());
                    // This is used to send the TCP connection requests from this peer to the peers  
                    if (addConnHandler(new ConnectionHandler(peerId, true, peer.getPeerId(),socket, fileManager, peerManager))) {
                        iter.remove();
                        LogHelper.getLogger().debug("Peer: "+ peerId +"makes a connection to Peer: "+ peer.getPeerId());

                    }
                }
                catch (ConnectException ex) {
                    LogHelper.getLogger().warning("Connection Failed from Peer:" + peerId + " to peer: " + peer.getPeerId()+ " at address " + peer._peerAddress + ":" + peer.getPort());
                    if (socket != null) {
                        try {
                            socket.close();
                        } catch (Exception e)
                        {
                        	LogHelper.getLogger().warning("Socket Close failed at Peer:" + peerId + " Exception:"+ e);
                        }
                    }
                }
                catch (IOException ex) {
                	LogHelper.getLogger().warning("IO Exception Occured while connecting from peer:" + peerId + " to peer: " + peer.getPeerId()+ " at address " + peer._peerAddress + ":" + peer.getPort() + "\n Exception:"+ ex);
                    if (socket != null) {
                        try {
                            socket.close();
                        } catch (IOException e)
                        {
                        	LogHelper.getLogger().warning("Socket Close failed at Peer:" + peerId + " Exception:"+ e);
                        }
                    }
                }
            }
            while (iter.hasNext());
            iter = peersToBeConnected.iterator();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
            }
        }
    }

    /*
     * Function used to check if all the peers has downloaded the file successfully
     *
     */
    @Override
    public void isNeighbourFileDownloadComplete() {
        LogHelper.getLogger().info("File Download for All Neighbours is successful");
        isNeighboursFileComplete.set(true);
        if (isfileComplete.get() && isNeighboursFileComplete.get()) { // Check for all peers in the network to download the file successfully
            isTerminateFlag.set(true);
            System.exit(0);
        }
    }

    /*
     * Function used to check if this peer has downloaded the file successfully
     *
     */
    @Override
    public synchronized void isFileDownloadComplete() {

        ftupdateLogger.fileDownloadedMessage();
        isfileComplete.set(true);
        if (isfileComplete.get() && isNeighboursFileComplete.get()) { // Check for all peers in the network to download the file successfully
            isTerminateFlag.set(true);
            System.exit(0);
        }
    }
    /*
     * Function used to check if we have received a piece from the peer
     *
     */
    @Override
    public synchronized void isPieceArrived(int partIdx) {
    	// Once a piece has been received, 'HAVE' message for the piece will be sent to all the peers
        for (ConnectionHandler connHanlder : connectionHandlers) {
            connHanlder.send(new Have(partIdx));
            if (!peerManager.isInteresting(connHanlder.getRemotePeerId(), fileManager.getReceivedParts())) {
                connHanlder.send(new NotInterested());
            }
        }
    }

    private synchronized boolean addConnHandler(ConnectionHandler connHandler) {
        if (!connectionHandlers.contains(connHandler)) {
            connectionHandlers.add(connHandler);
            new Thread(connHandler).start();
            try {
                wait(10);
            } catch (InterruptedException e) {
                LogHelper.getLogger().warning(e);
            }

        }
        else {
            LogHelper.getLogger().debug("Peer " + connHandler.getRemotePeerId() + " is trying to connect but a connection already exists");
        }
        return true;
    }

    @Override
    public synchronized void chockedPeers(Collection<Integer> chokedPeersIds) {
        for (ConnectionHandler ch : connectionHandlers) {
            if (chokedPeersIds.contains(ch.getRemotePeerId())) {
                LogHelper.getLogger().debug("Choking " + ch.getRemotePeerId());
                ch.send(new Choke());
            }
        }
    }

    @Override
    public synchronized void unchockedPeers(Collection<Integer> unchokedPeersIds) {
        for (ConnectionHandler ch : connectionHandlers) {
            if (unchokedPeersIds.contains(ch.getRemotePeerId())) {
                LogHelper.getLogger().debug("Unchoking " + ch.getRemotePeerId());
                ch.send(new Unchoke());
            }
        }
    }
}
