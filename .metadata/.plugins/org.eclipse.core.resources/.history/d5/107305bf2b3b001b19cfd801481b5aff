package edu.ufl.cise.cnt5106c.messages;

import edu.ufl.cise.cnt5106c.io.CustomStreamInterface;
import edu.ufl.cise.cnt5106c.log.LogHelper;
import java.io.IOException;

import java.io.DataInputStream;
import java.io.DataOutputStream;

public class PeerMessage implements CustomStreamInterface  {

    private int msgLength;
    private final MessageType _type;
    protected byte[] _payload;

    protected PeerMessage (MessageType type) {
        this (type, null);
    }

    protected PeerMessage (MessageType type, byte[] payload) {
        msgLength = (payload == null ? 0 : payload.length)
                + 1; // for the _type
        _type = type;
        _payload = payload;
    }

    public MessageType getType() {
        return _type;
    }

    @Override
    public void read (DataInputStream in) throws IOException {
        if ((_payload != null) && (_payload.length) > 0) {
            in.readFully(_payload, 0, _payload.length);
        }
    }

    @Override
    public void write (DataOutputStream out) throws IOException {
        out.writeInt (msgLength);
        out.writeByte (_type.getValue());
        if ((_payload != null) && (_payload.length > 0)) {
            out.write (_payload, 0, _payload.length);
        }
    }

    public static PeerMessage getNewMessageObject (int length, MessageType type) throws ClassNotFoundException, IOException {
        switch (type) {
            case Choke:
                return new ChokeMessage();

            case Unchoke:
                return new UnchokeMessage();

            case Interested:
                return new InterestedMessage();

            case NotInterested:
                return new NotInterestedMessage();

            case Have:
                return new HaveMessage (new byte[length]);

            case BitField:
                return new BitfieldMessage (new byte[length]);

            case Request:
                return new RequestMessage (new byte[length]);

            case Piece:
                return new PieceMessage (new byte[length]);

            default:
                throw new ClassNotFoundException ("Incorrect message type provided: " + type.toString());
        }
    }
}
