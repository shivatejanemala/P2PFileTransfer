package peerProcessPackage;

import peerProcessPackage.communication.CustomInputStream;
import peerProcessPackage.communication.CustomOutputStream;
import peerProcessPackage.log.FileTransferUpdateLogger;
import peerProcessPackage.log.LoggerConfiguration;
import peerProcessPackage.messages.HandshakeMessage;
import peerProcessPackage.messages.PeerMessage;
import peerProcessPackage.messages.RequestMessage;

import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;


public class CommunicationChannelHandler implements Runnable {

    private static final int DEFAULT_PEERID = -1;

    private final int peerId;
    private final Socket socket;
    private final CustomOutputStream outStream;
    private final FileManager fileManager;
    private final PeerManager peerManager;
    private final boolean isConnectingPeer;
    private final int remotePeerId; // Expected remote peerId
    private final AtomicInteger _remotePeerId; // Remote peerId received from the handshake
    private final BlockingQueue<PeerMessage> msgQueue = new LinkedBlockingQueue<>();

    public CommunicationChannelHandler(int localPeerId, Socket socket, FileManager fileMgr, PeerManager peerMgr)
            throws IOException {
        this(localPeerId, false, -1, socket, fileMgr, peerMgr);
    }

    public CommunicationChannelHandler(int localPeerId, boolean isConnectingPeer, int remotePeerId,
                             Socket socket, FileManager fileMgr, PeerManager peerMgr) throws IOException {
    	this.socket = socket;
    	this.peerId = localPeerId;
        this.isConnectingPeer = isConnectingPeer;
        this.remotePeerId = remotePeerId;
        this.fileManager = fileMgr;
        this.peerManager = peerMgr;
        this.outStream = new CustomOutputStream(socket.getOutputStream());
        this._remotePeerId = new AtomicInteger(DEFAULT_PEERID);
    }

    public int getRemotePeerId() {
        return _remotePeerId.get();
    }

    @Override
    public void run() {
        new Thread() {

            private boolean isRemotePeerChoked = true;

            @Override
            public void run() {
                Thread.currentThread().setName(getClass().getName() + "-" + _remotePeerId + "-sending thread");
                while (true) {
                    try {
                        final PeerMessage message = msgQueue.take();
                        if (message == null) {
                            continue;
                        }
                        if (_remotePeerId.get() == DEFAULT_PEERID) {
                            LoggerConfiguration.getLogger().debug("cannot proceed with sending message of type " + message.getType() + " because successful handshake isnt done yet");
                        } else {
                        	switch (message.getType()) {
                                case Choke: {
                                    if (!isRemotePeerChoked) {
                                        isRemotePeerChoked = true;
                                        sendMessage(message);
                                    }
                                    break;
                                }
                                case Unchoke: {
                                    if (isRemotePeerChoked) {
                                        isRemotePeerChoked = false;
                                        sendMessage(message);
                                    }
                                    break;
                                }
                                default:
                                    sendMessage(message);
                            }
                        
                        }
                    } catch (IOException ex) {
                        LoggerConfiguration.getLogger().warning(ex);
                    } catch (InterruptedException ex) {
                    }
                }
            }
        }.start();

        try {
            final CustomInputStream in = new CustomInputStream(socket.getInputStream());

            // Create and send a handshake to peer
            LoggerConfiguration.getLogger().info("sending Handshake message from peer:" + peerId + " to peer:"+ remotePeerId);
            outStream.writeObject(new HandshakeMessage(peerId));
            
            // receive handshake from the peer
            HandshakeMessage receivedHandShake = (HandshakeMessage) in.readObject();
            _remotePeerId.set(receivedHandShake.getPeerId()); // setting the peerId from the received handshake to _remotePeerId
            if (isConnectingPeer && (_remotePeerId.get() != remotePeerId)) {
                throw new Exception("Remote peer id " + _remotePeerId + " does not match with the expected id: " + remotePeerId);
            }
            
            Thread.currentThread().setName("CommunicationChannelHandler-" + _remotePeerId.get());
            final FileTransferUpdateLogger eventLogger = new FileTransferUpdateLogger(peerId);
            final MessageHandler msgHandler = new MessageHandler(_remotePeerId.get(), fileManager, peerManager, eventLogger);

            // Handshake verified and successful connection
            eventLogger.peerConnectSuccessLog(_remotePeerId.get(), isConnectingPeer);

            sendMessage(msgHandler.handleHandShakeMsgFromPeer(receivedHandShake));
           //Actual messages received from the remote peerId is achieved
            while (true) {
                try {
                	
                    sendMessage(msgHandler.handleActualMsgFromPeer((PeerMessage) in.readObject()));
                	
                } catch (Exception ex) {
                    LoggerConfiguration.getLogger().warning(ex);
                    break;
                }
            }
        } catch (Exception ex) {
            LoggerConfiguration.getLogger().warning(ex);
        } finally {
            try {
                socket.close();
            } catch (Exception e) {
            }
        }
        LoggerConfiguration.getLogger().warning(Thread.currentThread().getName()+ "is stopped. No further communication is allowed.");
    }

    public void send(final PeerMessage message) {
        msgQueue.add(message);
    }

    private synchronized void sendMessage(PeerMessage message) throws IOException {
        if (message != null) {
            outStream.writeObject(message);
            
        }
    }
}
